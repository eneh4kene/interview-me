#!/usr/bin/env tsx

import { Pool } from 'pg';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

if (!process.env.DATABASE_URL) {
    throw new Error('DATABASE_URL is not set');
}

// PostgreSQL connection pool
const pgPool = new Pool({
    connectionString: process.env.DATABASE_URL,
    max: 20,
    idleTimeoutMillis: 30000,
    connectionTimeoutMillis: 2000,
});

// HTML entity decoding function (same as in jobAggregation.ts)
function decodeHtmlEntities(text: string): string {
    const htmlEntities: Record<string, string> = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#39;': "'",
        '&apos;': "'",
        '&nbsp;': ' ',
        '&copy;': '¬©',
        '&reg;': '¬Æ',
        '&trade;': '‚Ñ¢',
        '&hellip;': '...',
        '&mdash;': '‚Äî',
        '&ndash;': '‚Äì',
        '&lsquo;': '\u2018',
        '&rsquo;': '\u2019',
        '&ldquo;': '"',
        '&rdquo;': '"',
        '&bull;': '‚Ä¢',
        '&para;': '¬∂',
        '&dagger;': '‚Ä†',
        '&Dagger;': '‚Ä°',
        '&permil;': '‚Ä∞',
        '&lsaquo;': '‚Äπ',
        '&rsaquo;': '‚Ä∫',
        '&euro;': '‚Ç¨',
        '&pound;': '¬£',
        '&yen;': '¬•',
        '&cent;': '¬¢',
        '&curren;': '¬§',
        '&brvbar;': '¬¶',
        '&sect;': '¬ß',
        '&uml;': '¬®',
        '&ordf;': '¬™',
        '&laquo;': '¬´',
        '&not;': '¬¨',
        '&shy;': '',
        '&macr;': '¬Ø',
        '&deg;': '¬∞',
        '&plusmn;': '¬±',
        '&sup2;': '¬≤',
        '&sup3;': '¬≥',
        '&acute;': '¬¥',
        '&micro;': '¬µ',
        '&middot;': '¬∑',
        '&cedil;': '¬∏',
        '&sup1;': '¬π',
        '&ordm;': '¬∫',
        '&raquo;': '¬ª',
        '&frac14;': '¬º',
        '&frac12;': '¬Ω',
        '&frac34;': '¬æ',
        '&iquest;': '¬ø',
        '&Agrave;': '√Ä',
        '&Aacute;': '√Å',
        '&Acirc;': '√Ç',
        '&Atilde;': '√É',
        '&Auml;': '√Ñ',
        '&Aring;': '√Ö',
        '&AElig;': '√Ü',
        '&Ccedil;': '√á',
        '&Egrave;': '√à',
        '&Eacute;': '√â',
        '&Ecirc;': '√ä',
        '&Euml;': '√ã',
        '&Igrave;': '√å',
        '&Iacute;': '√ç',
        '&Icirc;': '√é',
        '&Iuml;': '√è',
        '&ETH;': '√ê',
        '&Ntilde;': '√ë',
        '&Ograve;': '√í',
        '&Oacute;': '√ì',
        '&Ocirc;': '√î',
        '&Otilde;': '√ï',
        '&Ouml;': '√ñ',
        '&times;': '√ó',
        '&Oslash;': '√ò',
        '&Ugrave;': '√ô',
        '&Uacute;': '√ö',
        '&Ucirc;': '√õ',
        '&Uuml;': '√ú',
        '&Yacute;': '√ù',
        '&THORN;': '√û',
        '&szlig;': '√ü',
        '&agrave;': '√†',
        '&aacute;': '√°',
        '&acirc;': '√¢',
        '&atilde;': '√£',
        '&auml;': '√§',
        '&aring;': '√•',
        '&aelig;': '√¶',
        '&ccedil;': '√ß',
        '&egrave;': '√®',
        '&eacute;': '√©',
        '&ecirc;': '√™',
        '&euml;': '√´',
        '&igrave;': '√¨',
        '&iacute;': '√≠',
        '&icirc;': '√Æ',
        '&iuml;': '√Ø',
        '&eth;': '√∞',
        '&ntilde;': '√±',
        '&ograve;': '√≤',
        '&oacute;': '√≥',
        '&ocirc;': '√¥',
        '&otilde;': '√µ',
        '&ouml;': '√∂',
        '&divide;': '√∑',
        '&oslash;': '√∏',
        '&ugrave;': '√π',
        '&uacute;': '√∫',
        '&ucirc;': '√ª',
        '&uuml;': '√º',
        '&yacute;': '√Ω',
        '&thorn;': '√æ',
        '&yuml;': '√ø'
    };

    return text.replace(/&[a-zA-Z0-9#]+;/g, (entity) => {
        return htmlEntities[entity] || entity;
    });
}

function stripHtmlTags(text: string): string {
    return text.replace(/<[^>]*>/g, ''); // removes <b>, <i>, <br>, etc.
}

async function cleanupHtmlEntities() {
    const client = await pgPool.connect();

    try {
        console.log('üßπ Starting HTML entity cleanup for existing job data...');

        // Get all jobs that might have HTML entities or tags
        const result = await client.query(`
            SELECT id, title, company, location, description_snippet
            FROM jobs 
            WHERE title LIKE '%&%' OR title LIKE '%<%'
               OR company LIKE '%&%' OR company LIKE '%<%'
               OR location LIKE '%&%' OR location LIKE '%<%'
               OR description_snippet LIKE '%&%' OR description_snippet LIKE '%<%'
            ORDER BY created_at DESC
        `);

        console.log(`üìä Found ${result.rows.length} jobs with potential HTML entities`);

        if (result.rows.length === 0) {
            console.log('‚úÖ No jobs with HTML entities found. Database is clean!');
            return;
        }

        let updatedCount = 0;
        let errorCount = 0;

        // Process each job
        for (const job of result.rows) {
            try {
                const decodedTitle = stripHtmlTags(decodeHtmlEntities(job.title));
                const decodedCompany = stripHtmlTags(decodeHtmlEntities(job.company));
                const decodedLocation = stripHtmlTags(decodeHtmlEntities(job.location));
                const decodedDescription = stripHtmlTags(decodeHtmlEntities(job.description_snippet));

                // Only update if there were actual changes
                if (decodedTitle !== job.title ||
                    decodedCompany !== job.company ||
                    decodedLocation !== job.location ||
                    decodedDescription !== job.description_snippet) {

                    await client.query(`
                        UPDATE jobs 
                        SET 
                            title = $1,
                            company = $2,
                            location = $3,
                            description_snippet = $4,
                            updated_at = CURRENT_TIMESTAMP
                        WHERE id = $5
                    `, [decodedTitle, decodedCompany, decodedLocation, decodedDescription, job.id]);

                    updatedCount++;
                    console.log(`‚úÖ Updated job: ${decodedTitle} at ${decodedCompany}`);
                }
            } catch (error) {
                errorCount++;
                console.error(`‚ùå Error updating job ${job.id}:`, error);
            }
        }

        console.log(`\nüìà Cleanup Summary:`);
        console.log(`   ‚Ä¢ Jobs processed: ${result.rows.length}`);
        console.log(`   ‚Ä¢ Jobs updated: ${updatedCount}`);
        console.log(`   ‚Ä¢ Errors: ${errorCount}`);
        console.log(`   ‚Ä¢ Success rate: ${((updatedCount / result.rows.length) * 100).toFixed(1)}%`);

        if (updatedCount > 0) {
            console.log('\nüéâ HTML entity cleanup completed successfully!');
            console.log('   The job listings should now display properly without weird symbols.');
        } else {
            console.log('\n‚ú® No updates were needed - all job data was already clean!');
        }

    } catch (error) {
        console.error('‚ùå Error during cleanup:', error);
        throw error;
    } finally {
        client.release();
    }
}

async function main() {
    try {
        await cleanupHtmlEntities();
    } catch (error) {
        console.error('üí• Cleanup failed:', error);
        process.exit(1);
    } finally {
        await pgPool.end();
    }
}

// Run the cleanup
main();
